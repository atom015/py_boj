"""
문제
눈금의 간격이 1인 M×N(M,N≤100)크기의 모눈종이가 있다. 이 모눈종이 위에 눈금에 맞추어 K개의 직사각형을 그릴 때, 이들 K개의 직사각형의 내부를 제외한 나머지 부분이 몇 개의 분리된 영역으로 나누어진다.

예를 들어 M=5, N=7 인 모눈종이 위에 <그림 1>과 같이 직사각형 3개를 그렸다면, 그 나머지 영역은 <그림 2>와 같이 3개의 분리된 영역으로 나누어지게 된다.



<그림 2>와 같이 분리된 세 영역의 넓이는 각각 1, 7, 13이 된다.

M, N과 K 그리고 K개의 직사각형의 좌표가 주어질 때, K개의 직사각형 내부를 제외한 나머지 부분이 몇 개의 분리된 영역으로 나누어지는지, 그리고 분리된 각 영역의 넓이가 얼마인지를 구하여 이를 출력하는 프로그램을 작성하시오.

입력
첫째 줄에 M과 N, 그리고 K가 빈칸을 사이에 두고 차례로 주어진다. M, N, K는 모두 100 이하의 자연수이다. 둘째 줄부터 K개의 줄에는 한 줄에 하나씩 직사각형의 왼쪽 아래 꼭짓점의 x, y좌표값과 오른쪽 위 꼭짓점의 x, y좌표값이 빈칸을 사이에 두고 차례로 주어진다. 모눈종이의 왼쪽 아래 꼭짓점의 좌표는 (0,0)이고, 오른쪽 위 꼭짓점의 좌표는(N,M)이다. 입력되는 K개의 직사각형들이 모눈종이 전체를 채우는 경우는 없다.

출력
첫째 줄에 분리되어 나누어지는 영역의 개수를 출력한다. 둘째 줄에는 각 영역의 넓이를 오름차순으로 정렬하여 빈칸을 사이에 두고 출력한다.

예제 입력 1
5 7 3
0 2 4 4
1 1 2 5
4 0 6 2
예제 출력 1
3
1 7 13
"""
import sys
sys.setrecursionlimit(50000) #런타임에러가안나게 기존재귀 깊이값이 아닌 좀더늘린 50000으로 설정해준다.
m,n,k = map(int,input().split()) #m:세로,n:가로,k:좌표의 개수
#상하좌우 비교 리스트
dx = [1,0,-1,0]
dy = [0,-1,0,1]
li = [[0 for i in range(n)] for i in range(m)] #m(세로)*n(가로)으로 인접행렬을 만들어줬다.
visited = [[False for i in range(n)] for i in range(m)] #m(세로)*n(가로)으로 방문체크 리스트를 만들어준다.
result = [] #넓이들을 넣어준다.
for i in range(k):
    x1,y1,x2,y2 = map(int,input().split()) #x1,y1:직사각형의 왼쪽아래 꼭짓점 x,y좌표값 x2,y2:직사각형의 오른위꼭짓점 좌표값 ,예:1,1,2,5
    for y in range(y1,y2,1): #y1부터 y2까지 1씩늘어나게 한다. 예:(1,5,1)
        for x in range(x1,x2,1): #x1부터 x2까지 1씩늘어나게 한다.(2,5,1)
            li[y][x] = 1 #li[y][x]를 1로 바꿔준다.
            visited[y][x] == True #1이된부분을 dfs에서 방문하면안되니까 같아 방문처리를 해주었다.
def dfs(x,y):
    global cnt
    cnt += 1 #넓이를 구하기위해 1씩더해준다.
    visited[x][y] = True #방문체크
    for i in range(4):
        nx = x + dx[i]
        ny = y + dy[i]
        if 0 <= nx < m and 0 <= ny < n: #만약에 상하좌우비교 값이 지도밖을 벗어나지 않고
            if li[nx][ny] == 0 and visited[nx][ny] == False: #li[nx][ny]가 0이고 방문한적이없으면
                dfs(nx,ny) #재귀
    return cnt #cnt를 반환
#만약에 li[i][j]가 0이고 방문한적이 없으면 dfs를 돌린다.
for i in range(m):
    for j in range(n):
        if li[i][j] == 0 and visited[i][j] == False:
            cnt = 0
            result.append(dfs(i,j))
print(len(result)) #영역의 개수출력
for i in sorted(result): #오름차순으로 각 영역의 넓이 출력
    print(i,end=' ')
